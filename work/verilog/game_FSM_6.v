/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_FSM_6 (
    input clk,
    input rst,
    input enter,
    input toggle,
    output reg [5:0] alufn,
    output reg [2:0] asel,
    output reg [2:0] bsel,
    output reg [1:0] demux,
    output reg [7:0] led_out,
    output reg [7:0] led_out_1,
    output reg [2:0] led_out_2
  );
  
  
  
  localparam START_state = 4'd0;
  localparam IDLE_state = 4'd1;
  localparam STATE_RED_state = 4'd2;
  localparam STATE_GREEN_state = 4'd3;
  localparam STATE_BLUE_state = 4'd4;
  localparam CHECK_STATE_state = 4'd5;
  localparam CHECK_SUCCESS_state = 4'd6;
  localparam CHECK_BULL_state = 4'd7;
  localparam CHECK_COW_state = 4'd8;
  localparam CHECK_LIFE_PART1_state = 4'd9;
  localparam CHECK_LIFE_PART2_state = 4'd10;
  localparam CHECK_BULL_COW_state = 4'd11;
  localparam SUCCESS_state = 4'd12;
  localparam FAIL_state = 4'd13;
  
  reg [3:0] M_state_d, M_state_q = START_state;
  reg [2:0] M_check_state_d, M_check_state_q = 1'h0;
  reg [15:0] M_user_input_d, M_user_input_q = 1'h0;
  
  reg [15:0] answer;
  
  always @* begin
    M_state_d = M_state_q;
    M_user_input_d = M_user_input_q;
    M_check_state_d = M_check_state_q;
    
    alufn = 1'h0;
    asel = 1'h0;
    bsel = 1'h0;
    demux = 1'h0;
    led_out = 1'h0;
    led_out_1 = 1'h0;
    led_out_2 = M_check_state_q;
    answer = 16'h9999;
    
    case (M_state_q)
      START_state: begin
        if (enter) begin
          M_state_d = IDLE_state;
        end
      end
      IDLE_state: begin
        if (toggle) begin
          M_state_d = STATE_RED_state;
        end
      end
      STATE_RED_state: begin
        led_out = 8'h09;
        if (toggle) begin
          M_state_d = STATE_GREEN_state;
        end else begin
          if (enter) begin
            if (M_check_state_q == 1'h0) begin
              M_user_input_d[0+3-:4] = 4'h9;
            end else begin
              if (M_check_state_q == 1'h1) begin
                M_user_input_d[4+3-:4] = 4'h9;
              end else begin
                if (M_check_state_q == 2'h2) begin
                  M_user_input_d[8+3-:4] = 4'h9;
                end else begin
                  if (M_check_state_q == 2'h3) begin
                    M_user_input_d[12+3-:4] = 4'h9;
                  end
                end
              end
            end
            M_check_state_d = M_check_state_q + 1'h1;
            M_state_d = CHECK_STATE_state;
          end
        end
      end
      STATE_GREEN_state: begin
        led_out = 8'h05;
        if (toggle) begin
          M_state_d = STATE_BLUE_state;
        end else begin
          if (enter) begin
            if (M_check_state_q == 1'h0) begin
              M_user_input_d[0+3-:4] = 4'h5;
            end else begin
              if (M_check_state_q == 1'h1) begin
                M_user_input_d[4+3-:4] = 4'h5;
              end else begin
                if (M_check_state_q == 2'h2) begin
                  M_user_input_d[8+3-:4] = 4'h5;
                end else begin
                  if (M_check_state_q == 2'h3) begin
                    M_user_input_d[12+3-:4] = 4'h5;
                  end
                end
              end
            end
            M_check_state_d = M_check_state_q + 1'h1;
            M_state_d = CHECK_STATE_state;
          end
        end
      end
      STATE_BLUE_state: begin
        led_out = 8'h0d;
        if (toggle) begin
          M_state_d = STATE_RED_state;
        end else begin
          if (enter) begin
            if (M_check_state_q == 1'h0) begin
              M_user_input_d[0+3-:4] = 4'h3;
            end else begin
              if (M_check_state_q == 1'h1) begin
                M_user_input_d[4+3-:4] = 4'h3;
              end else begin
                if (M_check_state_q == 2'h2) begin
                  M_user_input_d[8+3-:4] = 4'h3;
                end else begin
                  if (M_check_state_q == 2'h3) begin
                    M_user_input_d[12+3-:4] = 4'h3;
                  end
                end
              end
            end
            M_check_state_d = M_check_state_q + 1'h1;
            M_state_d = CHECK_STATE_state;
          end
        end
      end
      CHECK_STATE_state: begin
        if (M_check_state_q == 3'h4) begin
          M_state_d = CHECK_SUCCESS_state;
        end else begin
          M_state_d = IDLE_state;
        end
      end
      CHECK_SUCCESS_state: begin
        M_state_d = CHECK_BULL_state;
      end
      CHECK_BULL_state: begin
        if (answer == M_user_input_q) begin
          led_out_1 = 8'hff;
        end else begin
          led_out_1 = 8'h80;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_check_state_q <= 1'h0;
      M_user_input_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_check_state_q <= M_check_state_d;
      M_user_input_q <= M_user_input_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
