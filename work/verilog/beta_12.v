/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module beta_12 (
    input clk,
    input rst,
    output reg [12:0] guess_out,
    output reg [12:0] check_answer_out,
    output reg [7:0] led_1,
    output reg [7:0] led_2,
    output reg [7:0] led_3,
    output reg [7:0] led_4,
    output reg [7:0] led_5,
    output reg [7:0] led_6,
    output reg [7:0] led_7,
    output reg [7:0] led_8,
    output reg [15:0] fsmregisterlife
  );
  
  
  
  reg [15:0] inputAlu_a;
  
  reg [15:0] inputAlu_b;
  
  reg [2:0] asel;
  
  reg [2:0] bsel;
  
  reg [1:0] demux;
  
  reg [15:0] M_registerlife_d, M_registerlife_q = 1'h0;
  reg [15:0] M_registerbull_d, M_registerbull_q = 1'h0;
  reg [15:0] M_registerbullpluscow_d, M_registerbullpluscow_q = 1'h0;
  localparam INIT_state = 2'd0;
  localparam DEMUXZERO_state = 2'd1;
  localparam DEMUXONE_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = INIT_state;
  wire [16-1:0] M_mastermind_alu_alu;
  wire [1-1:0] M_mastermind_alu_z;
  wire [1-1:0] M_mastermind_alu_v;
  wire [1-1:0] M_mastermind_alu_n;
  reg [6-1:0] M_mastermind_alu_alufn;
  reg [16-1:0] M_mastermind_alu_a;
  reg [16-1:0] M_mastermind_alu_b;
  alumodule_13 mastermind_alu (
    .clk(clk),
    .rst(rst),
    .alufn(M_mastermind_alu_alufn),
    .a(M_mastermind_alu_a),
    .b(M_mastermind_alu_b),
    .alu(M_mastermind_alu_alu),
    .z(M_mastermind_alu_z),
    .v(M_mastermind_alu_v),
    .n(M_mastermind_alu_n)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_registerbullpluscow_d = M_registerbullpluscow_q;
    M_registerlife_d = M_registerlife_q;
    M_registerbull_d = M_registerbull_q;
    
    guess_out = 1'h0;
    check_answer_out = 1'h0;
    led_1 = 1'h0;
    led_2 = 1'h0;
    led_3 = 1'h0;
    led_4 = 1'h0;
    led_5 = 1'h0;
    led_6 = 1'h0;
    led_7 = 1'h0;
    led_8 = 1'h0;
    asel = 3'h2;
    bsel = 3'h1;
    demux = 2'h0;
    fsmregisterlife = 1'h0;
    
    case (M_state_q)
      INIT_state: begin
        M_registerlife_d = 3'h6;
        M_state_d = DEMUXONE_state;
      end
      DEMUXONE_state: begin
        demux = 2'h1;
        M_state_d = DEMUXZERO_state;
      end
      DEMUXZERO_state: begin
        demux = 2'h0;
        M_registerlife_d = M_registerlife_q;
        fsmregisterlife = M_registerlife_q;
        M_state_d = DEMUXZERO_state;
      end
    endcase
    led_8 = asel;
    
    case (asel)
      3'h0: begin
        inputAlu_a = 3'h7;
      end
      3'h1: begin
        inputAlu_a = 1'h0;
      end
      3'h2: begin
        inputAlu_a = M_registerlife_q;
      end
      3'h3: begin
        inputAlu_a = M_registerbull_q;
      end
      3'h7: begin
        inputAlu_a = M_registerbullpluscow_q;
      end
      default: begin
        inputAlu_a = 1'h0;
      end
    endcase
    
    case (bsel)
      3'h0: begin
        inputAlu_b = 1'h0;
      end
      3'h1: begin
        inputAlu_b = 1'h1;
      end
      3'h2: begin
        inputAlu_b = 2'h2;
      end
      3'h3: begin
        inputAlu_b = 2'h3;
      end
      3'h7: begin
        inputAlu_b = 3'h4;
      end
      default: begin
        inputAlu_b = 1'h0;
      end
    endcase
    M_mastermind_alu_a = inputAlu_a;
    M_mastermind_alu_b = inputAlu_b;
    M_mastermind_alu_alufn = 6'h01;
    
    case (demux)
      2'h1: begin
        M_registerlife_d = M_mastermind_alu_alu;
      end
      2'h2: begin
        M_registerbull_d = M_mastermind_alu_alu;
      end
      2'h3: begin
        M_registerbullpluscow_d = M_mastermind_alu_alu;
      end
    endcase
    led_7 = M_registerlife_q[0+7-:8];
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_registerlife_q <= 1'h0;
      M_registerbull_q <= 1'h0;
      M_registerbullpluscow_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_registerlife_q <= M_registerlife_d;
      M_registerbull_q <= M_registerbull_d;
      M_registerbullpluscow_q <= M_registerbullpluscow_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
