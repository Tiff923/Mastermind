module game_FSM(
    input clk, // clock
    input rst, // clock

    input enter,
    input toggle,

    output alufn[6],
    output asel[3],
    output bsel[3],
    output demux[2],

    output led_out[8],
    output led_out_1[8],
    output led_out_2[8]
) {

.clk(clk){
    .rst(rst){
    fsm state = {
        START,
        IDLE,
        STATE_RED,
        STATE_GREEN,
        STATE_BLUE,
        CHECK_STATE,
        CHECK_SUCCESS,
        CHECK_BULL,
        CHECK_COW,
        CHECK_LIFE_PART1,
        CHECK_LIFE_PART2,
        CHECK_BULL_COW,
        SUCCESS,
        FAIL
    };


    dff check_state [3]; // check whether enter 4 times
    dff user_input [16]; // store inputs from user
    dff user_input_cow [16]; // store inputs from user after removing those of "bull"
    dff output_cow [16]; // number of cows
    dff output_bull [16];

    }
}
  
var i;
var j;
var k;
sig answer[16];
var end_index;
var start_index;

    always {
        alufn = 0;
        asel = 0; 
        bsel = 0;
        demux = 0;
        led_out = 0;
        led_out_1 = output_bull.q[7:0];
        led_out_2 = output_bull.q[15:8];
        answer = 16b1001100110011001; // all red
        
        case (state.q){
            state.START:
                if (enter) {
                    state.d = state.IDLE;
                }
            
            state.IDLE:
                if (toggle) {
                    state.d = state.STATE_RED;
                }
            
            state.STATE_RED:
                led_out = 8b00001001;

                if (toggle) {
                    state.d = state.STATE_GREEN;
                }

                else if (enter) {
                    if (check_state.q == 0) {
                        user_input.d[3:0] = 4b1001;
                    }
                    else if (check_state.q == 1) {
                        user_input.d[7:4] = 4b1001;
                    }

                    else if (check_state.q == 2) {
                        user_input.d[11:8] = 4b1001;
                }
                    else if (check_state.q == 3) {
                        user_input.d[15:12] = 4b1001;
                }
                    check_state.d = check_state.q + 1;
                    state.d = state.CHECK_STATE;
                }
            
            state.STATE_GREEN:
                led_out = 8b00000101;

                if (toggle) {
                    state.d = state.STATE_BLUE;
                }

                else if (enter) {
                    if (check_state.q == 0) {
                        user_input.d[3:0] = 4b0101;
                    }
                    else if (check_state.q == 1) {
                        user_input.d[7:4] = 4b0101;
                    }

                    else if (check_state.q == 2) {
                        user_input.d[11:8] = 4b0101;
                }
                    else if (check_state.q == 3) {
                        user_input.d[15:12] = 4b0101;
                }
                    check_state.d = check_state.q + 1;
                    state.d = state.CHECK_STATE;
                }
            
            state.STATE_BLUE:
                led_out = 8b00001101;

                if (toggle) {
                    state.d = state.STATE_RED;
                }

                else if (enter) {
                    if (check_state.q == 0) {
                        user_input.d[3:0] = 4b0011;
                    }
                    else if (check_state.q == 1) {
                        user_input.d[7:4] = 4b0011;
                    }

                    else if (check_state.q == 2) {
                        user_input.d[11:8] = 4b0011;
                }
                    else if (check_state.q == 3) {
                        user_input.d[15:12] = 4b0011;
                }
                    check_state.d = check_state.q + 1;
                    state.d = state.CHECK_STATE;
                }
            
            state.CHECK_STATE:
                if (check_state.q == 4) {
                    state.d = state.CHECK_SUCCESS;
                }
                else {
                    state.d = state.IDLE;
                }
            
            state.CHECK_SUCCESS:
                state.d = state.CHECK_BULL;
            
            state.CHECK_BULL:
                for (k = 0; k < 4; k++) {
                    end_index = (k*4) + 3;
                    start_index = k * 4;
                    if (answer[end_index : start_index] == user_input.q[end_index : start_index]) { // cannot do indexing like that, but how?
                        output_bull.d = output_bull.q + 4b0111; 
                        output_bull.d = output_bull.q << 4;
                    }
                }

                state.d = state.CHECK_COW;

            state.CHECK_COW:
                // remove bulls to check for cows
                for (i = 0; i < 4; i++) {
                    end_index = (i*4) + 3;
                    start_index = i * 4;
                    if (~(answer[end_index : start_index] == user_input.q[end_index : start_index])) {
                        user_input_cow.d = user_input_cow.q + user_input.q[end_index : start_index];
                        user_input_cow.d = user_input_cow.q << 4; // shift left by 4 bits
                    }
                }

                // j to represent index of user_input_cow
                for (j = 0; j < 4; j++){
                    end_index = (j*4) + 3;
                    start_index = j * 4;
                    if (user_input_cow.q[end_index : start_index] == answer[3:0]) {
                        output_cow.d = output_cow.q + 4b1101;
                        output_cow.d = output_cow.q << 4;
                    }

                    else if (user_input_cow.q[end_index : start_index] == answer[7:4]) {
                        output_cow.d = output_cow.q + 4b1101;
                        output_cow.d = output_cow.q << 4;
                    }

                    else if (user_input_cow.q[end_index : start_index] == answer[11:8]) {
                        output_cow.d = output_cow.q + 4b1101;
                        output_cow.d = output_cow.q << 4;
                    }

                    else if (user_input_cow.q[end_index : start_index] == answer[15:12]) {
                        output_cow.d = output_cow.q + 4b1101;
                        output_cow.d = output_cow.q << 4;
                    }

                }

        }
    }
}
      