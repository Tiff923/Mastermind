module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    edge_detector edge_dt_btn_1 (#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_2 (#RISE(1), #FALL(0));
    
    button_conditioner btn_cond_1;
    button_conditioner btn_cond_2;
    
    .rst(rst){
    game_FSM game_FSM;
    
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    io_led[0] = game_FSM.led_out;
    io_led[1] = game_FSM.led_out_1;
    io_led[2] = game_FSM.led_out_2;
    
    btn_cond_1.in = io_button[1];
    btn_cond_2.in = io_button[4];
    edge_dt_btn_1.in = btn_cond_1.out;
    edge_dt_btn_2.in = btn_cond_2.out;
    
    game_FSM.enter = edge_dt_btn_1.out;
    game_FSM.toggle = edge_dt_btn_2.out;
    
  }
}